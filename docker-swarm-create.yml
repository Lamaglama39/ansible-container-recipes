- name: Initialize Docker Swarm on leader
  hosts: master_leader
  gather_facts: true
  tasks:
    - name: Check if Docker Swarm is already initialized
      shell: docker info --format '{{ "{{.Swarm.LocalNodeState}}" }}'
      register: swarm_status
      changed_when: false

    - name: Primary IP Address
      set_fact:
        leader_primary_ip: "{{ ansible_facts['default_ipv4']['address'] }}"
      when: swarm_status.stdout != 'active'

    - name: Initialize Docker Swarm
      shell: docker swarm init --default-addr-pool 172.16.0.0/16 --advertise-addr "{{ leader_primary_ip }}"
      register: swarm_init
      when: swarm_status.stdout != 'active'

    - name: Drain manager node
      shell: docker node update --availability drain {{ ansible_facts['hostname'] }}
      when: swarm_status.stdout == 'active'
      changed_when: false

    - name: Get Docker Swarm manager join-token
      shell: docker swarm join-token manager -q
      register: manager_join_token
      changed_when: false
      when: swarm_status.stdout != 'active'

    - name: Get Docker Swarm worker join-token
      shell: docker swarm join-token worker -q
      register: worker_join_token
      changed_when: false
      when: swarm_status.stdout != 'active'

- name: Join Docker Swarm as manager
  hosts: master_other
  gather_facts: true
  tasks:
    - name: Check if node is part of a Swarm cluster
      shell: docker info --format '{{ "{{.Swarm.LocalNodeState}}" }}'
      register: swarm_status
      changed_when: false

    - name: Join swarm cluster as a manager
      shell: "docker swarm join --token {{ hostvars[groups['docker_swarm_master_leader'][0]]['manager_join_token'].stdout }} {{ hostvars[groups['docker_swarm_master_leader'][0]]['leader_primary_ip'] }}:2377"
      when: swarm_status.stdout != 'active'

    - name: Drain manager node
      shell: docker node update --availability drain {{ ansible_facts['hostname'] }}
      when: swarm_status.stdout == 'active'
      changed_when: false

- name: Join Docker Swarm as worker
  hosts: worker
  gather_facts: false
  tasks:
    - name: Check if node is part of a Swarm cluster
      shell: docker info --format '{{ "{{.Swarm.LocalNodeState}}" }}'
      register: swarm_status
      changed_when: false

    - name: Join swarm cluster as a worker
      shell: "docker swarm join --token {{ hostvars[groups['docker_swarm_master_leader'][0]]['worker_join_token'].stdout }} {{ hostvars[groups['docker_swarm_master_leader'][0]]['leader_primary_ip'] }}:2377"
      when: swarm_status.stdout != 'active'
